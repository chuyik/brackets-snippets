# ---
# HTML
# From: https://github.com/joshnh/HTML-Snippets
# ---
- trigger: a
  scope: html
  description: Anchor Tag
  text: |
        <a href="${1}">${2}</a>${3}

- trigger: cond
  scope: html
  description: Conditional Comment
  text: |
        <!--[if ${1:lt IE 9}]>
          <link rel=stylesheet href="${2:css/ie.css}">
        <![endif]-->

- trigger: css
  scope: html
  description: Style Tag
  text: |
        <style type="text/css">${1}</style>${2}

- trigger: doctype
  scope: html
  description: Boilerplate HTML
  text: |
        <!doctype html>
        <html>
            <head>
                <meta charset="utf-8">
                <meta http-equiv="X-UA-Compatible" content="IE=edge">
                <meta name="description" content="">
                <meta name="viewport" content="width=device-width, initial-scale=1">
                <title>${1:Document}</title>
                <link rel="stylesheet" href="css/style.css">
            </head>
            <body>
                ${2}

                <script src="//ajax.googleapis.com/ajax/libs/jquery/1.11.2/jquery.min.js"></script>
                <script src="js/main.js"></script>
            </body>
        </html>

- trigger: fig
  scope: html
  description: Figure Tag
  text: |
        <figure>
            <img src="${1}" alt="${2}">
            <figcaption>${3}</figcaption>
        </figure>

- trigger: ga
  scope: html
  description: Google Analytics
  text: |
        <script>
            var _gaq = [['_setAccount', '${1:UA-XXXXX-X}'], ['_trackPageview']];
            (function(d, t) {
                var g = d.createElement(t),
                    s = d.getElementsByTagName(t)[0];
                g.src = '//www.google-analytics.com/ga.js';
                s.parentNode.insertBefore(g, s);
            }(document, 'script'));
        </script>

- trigger: ga2
  scope: html
  description: New Google Analytics
  text: |
        <script>
            (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
            (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
            m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
            })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

            ga('create', '${1:UA-XXXX-X}');
            ga('send', 'pageview');
        </script>

- trigger: img
  scope: html
  description: Dummy Image
  text: |
        <img src="http://dummyimage.com/${1:800}x${2:600}/4d494d/686a82.gif&text=${3:placeholder+image}" alt="${3:placeholder+image}">${4}

- trigger: link
  scope: html
  description: Link Tag
  text: |
        <link rel="stylesheet" type="text/css" href="${1}">${2}

- trigger: jquery
  scope: html
  description: jQuery Tag
  text: |
        <script src="//ajax.googleapis.com/ajax/libs/jquery/1.8.3/jquery.min.js"></script>
        <script>window.jQuery || document.write('<script src="js/vendor/jquery-1.11.2.min.js"><\/script>')</script>

- trigger: lorem
  scope: html
  description: Dummy Text
  text: |
        Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor
        incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis
        nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.
        Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu
        fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in
        culpa qui officia deserunt mollit anim id est laborum.

- trigger: meta
  scope: html
  description: Meta Tag
  text: |
        <meta charset=utf-8>
        <meta name=description content="${1}">
        <meta name=viewport content="width=device-width, initial-scale=1">${2}

- trigger: shiv
  scope: html
  description: IE Shiv
  text: |
        <!--[if lt IE 9]>
            <script src="//html5shiv.googlecode.com/svn/trunk/html5.js"></script>
        <![endif]-->

# ---
# CSS
# From: https://github.com/joshnh/CSS-Snippets
# ---
- trigger: ani
  scope: css
  description: Animation
  text: |
        -webkit-animation: ${1:name} ${2:duration};
        animation: ${1:name} ${2:duration};${3}

- trigger: aft
  scope: css
  description: After
  text: |
        ${1}:after {
            content: '';
            ${2}
        }

- trigger: box
  scope: css
  description: Box Shadow
  text: |
        box-shadow: ${1:horizontal}px ${2:vertical}px ${3:blur-radius}px ${4:spread-distance}px ${5:#eee};${6}

# From http://codepen.io/HugoGiraudel/pen/LklCv
- trigger: flex
  scope: css
  description: Flexbox
  text: |
        .flex-container {
          display: -webkit-box;
          display: -moz-box;
          display: -ms-flexbox;
          display: -webkit-flex;
          display: flex;

          -webkit-flex-flow: row wrap;
          justify-content: space-around;
        }

        .flex-item {
          flex: 1;
          background: tomato;
          padding: 50px;
          margin: 5px;
          color: white;
          text-align: center;
        }

- trigger: ff
  scope: css
  description: Font Family
  text: |
        font-family: Helvetica, Arial, sans-serif;

- trigger: h
  scope: css
  description: HSLA
  text: |
        hsla(${1:0},${2:0}%,${3:0}%,${4:1})${5}

- trigger: key
  scope: css
  description: KeyFrames
  text: |
        @-webkit-keyframes ${1:name} {
            0% {
              ${2:-webkit-transform: translate3d(0, 0, 0);}
            }
            100% {
              ${3:-webkit-transform: translate3d(0, 0, 0);}
            }
        }
        @keyframes ${1:name} {
            0% {
              ${2:transform: translate3d(0, 0, 0);}
            }
            100% {
              ${3:transform: translate3d(0, 0, 0);}
            }
        }

- trigger: med
  scope: css
  description: Media
  text: |
        @media (min-width: ${1}) {
          ${2}
        }

- trigger: r
  scope: css
  description: RGBA
  text: |
        rgba(${1:0},${2:0},${3:0},${4:1})${5}

- trigger: tex
  scope: css
  description: Text Shadow
  text: |
        text-shadow: ${1:horizontal}px ${2:vertical}px ${3:blur-radius}px ${4:#eee};${5}

- trigger: cap
  scope: css
  description: Capitalize
  text: |
        text-transform: capitalize;

- trigger: upp
  scope: css
  description: Upper Case
  text: |
        text-transform: uppercase;

- trigger: wra
  scope: css
  description: Word Wrap
  text: |
        overflow-wrap: break-word;
        word-wrap: break-word;


# ---
# Javascript: Console
# From: https://github.com/zenorocha/sublime-javascript-snippets
# ---
- trigger: cl
  scope: javascript
  description: console.log
  tag: VanillaJS
  tagHide: true
  text: |
        console.log(${1:obj});${2}

- trigger: cd
  scope: javascript
  description: console.dir
  tag: VanillaJS
  tagHide: true
  text: |
        console.dir(${1:obj});${2}

- trigger: ce
  scope: javascript
  description: console.error
  tag: VanillaJS
  tagHide: true
  text: |
        console.error(${1:obj});${2}

- trigger: cll
  scope: javascript
  description: console.log
  tag: VanillaJS
  tagHide: true
  text: |
        console.log('${1:obj}:', ${1:obj});${2}

- trigger: cdd
  scope: javascript
  description: console.dir
  tag: VanillaJS
  tagHide: true
  text: |
       console.dir('${1:obj}:', ${1:obj});${2}

- trigger: cee
  scope: javascript
  description: console.error
  tag: VanillaJS
  tagHide: true
  text: |
        console.error('${1:obj}:', ${1:obj});${2}

# ---
# Javascript: DOM
# ---
- trigger: ae
  scope: javascript
  description: document.addEventListener
  tag: VanillaJS
  tagHide: true
  text: |
        ${1:document}.addEventListener('${2:event}', function(e) {
          ${3}
        });

- trigger: ac
  scope: javascript
  description: document.appendChild
  tag: VanillaJS
  tagHide: true
  text: |
        ${1:document}.appendChild(${2:elem});${3}

- trigger: rc
  scope: javascript
  description: document.removeChild
  tag: VanillaJS
  tagHide: true
  text: |
        ${1:document}.removeChild(${2:elem});${3}

- trigger: cel
  scope: javascript
  description: document.createElement
  tag: VanillaJS
  tagHide: true
  text: |
        ${1:document}.createElement(${2:elem});${3}

- trigger: gi
  scope: javascript
  description: document.getElementById
  tag: VanillaJS
  tagHide: true
  text: |
        ${1:document}.getElementById('${2:id}');${3}

- trigger: gc
  scope: javascript
  description: document.getElementsByClassName
  tag: VanillaJS
  tagHide: true
  text: |
        ${1:document}.getElementsByClassName('${2:class}');${3}

- trigger: gt
  scope: javascript
  description: document.getElementsByTagName
  tag: VanillaJS
  tagHide: true
  text: |
        ${1:document}.getElementsByTagName('${2:tag}');${3}

- trigger: qs
  scope: javascript
  description: document.querySelector
  tag: VanillaJS
  tagHide: true
  text: |
        ${1:document}.querySelector('${2:selector}');${3}

- trigger: qsa
  scope: javascript
  description: document.querySelectorAll
  tag: VanillaJS
  tagHide: true
  text: |
        ${1:document}.querySelectorAll('${2:selector}');${3}

# ---
# Javascript: Loop
# ---
- trigger: fe
  scope: javascript
  description: forEach
  tag: VanillaJS
  tagHide: true
  text: |
        ${1:myArray}.forEach(function (${2:elem}) {
          ${3}
        });

- trigger: fi
  scope: javascript
  description: for in
  tag: VanillaJS
  tagHide: true
  text: |
        for (${1:prop} in ${2:obj}) {
          if (${2:obj}.hasOwnProperty(${1:prop})) {
            ${3}
          }
        }

# ---
# Javascript: Function
# ---
- trigger: fn
  scope: javascript
  description: function
  tag: VanillaJS
  tagHide: true
  text: |
        function ${1:methodName} (${2:arguments}) {
          ${3}
        }

- trigger: afn
  scope: javascript
  description: anonymous function
  tag: VanillaJS
  tagHide: true
  text: |
        function (${1:arguments}) {
          ${2}
        }

- trigger: pr
  scope: javascript
  description: prototype
  tag: VanillaJS
  tagHide: true
  text: |
        ${1:ClassName}.prototype.${2:methodName} = function (${3:arguments}) {
          ${4}
        };

- trigger: sw
  scope: javascript
  description: switch statement
  tag: VanillaJS
  tagHide: true
  text: |
        switch(${1:expression}) {
          case ${2:value}:
            ${3}
            break;
          default:
            break;
        }

# ---
# Javascript: Timer
# ---
- trigger: si
  scope: javascript
  description: setInterval
  tag: VanillaJS
  tagHide: true
  text: |
        setInterval(function() {
          ${2}
        }, ${1:delay});

- trigger: st
  scope: javascript
  description: setTimeout
  tag: VanillaJS
  tagHide: true
  text: |
        setTimeout(function() {
          ${2}
        }, ${1:delay});

# ---
# BackboneJS
# From: davidbarredo
# ---
- trigger: bbview
  scope: javascript
  description: View
  tag: BackboneJS
  tagHide: true
  text: |
        var ${1:viewName} = Backbone.View.extend({
          initialize: function (${2:options}) {},
          render: function () {

            return this;
          }
        });

- trigger: bbmodel
  scope: javascript
  description: Model
  tag: BackboneJS
  tagHide: true
  text: |
        var ${1:modelName} = Backbone.Model.extend({
          idAttribute: '${2:id}',
          defaults: {
            ${3}
          },
          validate: function(attrs, options) {}
        });

- trigger: modeltojson
  scope: javascript
  description: Model to JSON
  tag: BackboneJS
  tagHide: true
  text: |
        ${1:collection}.toJSON(${2:options});${3}

- trigger: modelget
  scope: javascript
  description: Model set
  tag: BackboneJS
  tagHide: true
  text: |
        ${1:model}.get('${2:attr}');${3}

- trigger: modelset
  scope: javascript
  description: Model get
  tag: BackboneJS
  tagHide: true
  text: |
        ${1:model}.set({${2:attr}: '${3:value}'});${4}

- trigger: modelsave
  scope: javascript
  description: Model save
  tag: BackboneJS
  tagHide: true
  text: |
        ${1:model}.save({${2:attr}: '${3:value}'});${4}

- trigger: bbcollection
  scope: javascript
  description: Collection
  tag: BackboneJS
  tagHide: true
  text: |
        var ${1:collectionName} = Backbone.Collection.extend({
          model: '${2:model}',
          url: '${3}',
          comparator: '${4:comparator}'
        });

- trigger: collectiontojson
  scope: javascript
  description: Collection to JSON
  tag: BackboneJS
  tagHide: true
  text: |
        ${1:collection}.toJSON(${2:options});${3}

- trigger: listento
  scope: javascript
  description: Listen to
  tag: BackboneJS
  tagHide: true
  text: |
        ${1:object}.listenTo(${2:other}, ${3:event}, ${2:callback})

- trigger: listentoonce
  scope: javascript
  description: Listen to once
  tag: BackboneJS
  tagHide: true
  text: |
        ${1:object}.listenToOnce(${2:other}, ${3:event}, ${2:callback})

# ---
# AngularJS
# From: myself
# ---
- trigger: config
  scope: javascript
  description: Config
  tag: AngularJS
  text: |
        config(function (${1:$stateProvider}) {
          ${2}
        })

- trigger: controller
  scope: javascript
  description: Controller
  tag: AngularJS
  text: |
        controller('${1:name}', function (${2:$scope}) {
          ${3}
        })

- trigger: directive
  scope: javascript
  description: Directive
  tag: AngularJS
  text: |
        directive('${1:name}', function () {
          return {
            templateUrl: '${2:view/foo.html}',
            restrict: '${3:A}',
            scope: {
            },
            link: function postLink (${4:$scope, elem, attrs}) {
              ${5}
            }
          }
        })

- trigger: factory
  scope: javascript
  description: Factory
  tag: AngularJS
  text: |
        factory('${1:name}', function (${2}) {
          ${3}
          return null;
        })

- trigger: filter
  scope: javascript
  description: Filter
  tag: AngularJS
  text: |
        filter(${1:name}, function(){
          return function(input){
            ${2}
            return input;
          };
        })

- trigger: provider
  scope: javascript
  description: Provider
  tag: AngularJS
  text: |
        provider('${1:name}', function () {
          ${2}

          this.$get = function () {
            return null;
          };
        })

- trigger: run
  scope: javascript
  description: Run
  tag: AngularJS
  text: |
        run(${1:$rootScope}, function () {
          ${2}
        })

- trigger: service
  scope: javascript
  description: Service
  tag: AngularJS
  text: |
        service('${1:name}', function (${2}) {
          ${3}
          return null;
        })

# ---
# php
# from: erknrio #5
# ---
- trigger: if
  scope: php
  description: if
  text: |
        if (${1:condition})
        {
          ${2}
        }

- trigger: ifelse
  scope: php
  description: if else
  text: |
        if (${1:condition})
        {
          ${2}
        }
        else
        {
          ${3}
        }

- trigger: if?
  scope: php
  description: if ternary
  text: |
        $${1:var}= (${2:condition}) ? ${3:TRUE} : ${4:FALSE};

- trigger: ifalt
  scope: php
  description: if alternative
  text: |
        if (${1:condition})
          ${2}
        endif;

- trigger: for
  scope: php
  description: for
  text: |
        for ($i = ${1:init}; $i < ${2:length}; $i++)
        {
          ${3}
        }

- trigger: fordec
  scope: php
  description: for decremental
  text: |
        for ($i = ${1:init}; $i > ${2:length}; $i--) 
        {
          ${3}
        }

- trigger: foreach
  scope: php
  description: foreach value
  text: |
        foreach ($${1:var} as $${2:value})
        {
          ${3}
        }

- trigger: foreachkey
  scope: php
  description: foreach key value
  text: |
        foreach ($${1:var} as $${2:key} => $${3:value})
        {
          ${4}
        }

- trigger: foreachalt
  scope: php
  description: foreach value alternative
  text: |
        foreach ($${1:var} as $${2:value}):
         ${3}
        endforeach;

- trigger: foreachkeyalt
  scope: php
  description: foreach alternative
  text: |
        foreach ($${1:var} as $${3:value}):
         ${4}
        endforeach;

- trigger: foralt
  scope: php
  description: for alternative
  text: |
        for ($i = ${1:init}; $i < ${2:length}; $i++):
          ${3}
        endfor;

- trigger: switch
  scope: php
  description: switch
  text: |
        switch ($${1:var})
        {
          case ${2:'value'}:
            ${3}
            break;

          default:
            break;
        }

- trigger: switchalt
  scope: php
  description: switch alternative
  text: |
        switch ($${1:var}):
          case ${2:'value'}:
            ${3}
            break;

          default:
            break;
        endswitch;

- trigger: vardump
  scope: php
  description: var_dump
  text: |
        var_dump($${1:var});

- trigger: printr
  scope: php
  description: print_r
  text: |
        print_r($${1:var});

- trigger: fu
  scope: php
  description: function
  text: |
        ${1:public} function ${2:FunctionName} ($${3:value} = ${4:''})
        {
          ${5}
        }

- trigger: echo
  scope: php
  description: echo string
  text: |
        echo '${1:string}';

- trigger: echovar
  scope: php
  description: echo variable
  text: |
        echo $${1:var};

- trigger: echostringvar
  scope: php
  description: echo string and variable
  text: |
        echo '${1:string}' . $${2:var};

- trigger: br
  scope: php
  description: echo html br
  text: |
        echo '</br>';

- trigger: empty
  scope: php
  description: empty
  text: |
        empty($${1:var});

- trigger: isset
  scope: php
  description: isset
  text: |
        isset($${1:var});

- trigger: array
  scope: php
  description: array
  text: |
        array(${1:value});

- trigger: arrayasoc
  scope: php
  description: array associative
  text: |
        array(${1:key} => ${2:value});

- trigger: jsonencode
  scope: php
  description: json encode
  text: |
        json_encode(${1:data});

- trigger: jsondecode
  scope: php
  description: json decode
  text: |
        json_decode(${1:data});

- trigger: $
  scope: php
  description: new variable
  text: |
        $${1:var} = ${2:value};

- trigger: =?
  scope: php
  description: short echo(>=5.4.0)
  text: |
        <?= ${1} ;?>

- trigger: date
  scope: php
  description: php date
  text: |
        date('${1}')

- trigger: dateo
  scope: php
  description: php DateTime
  text: |
        DateTime()

- trigger: urldecode
  scope: php
  description: url decode
  text: |
        urldecode(${1:str})

- trigger: urlencode
  scope: php
  description: url encode
  text: |
        urlencode(${1:str})

- trigger: array_sort
  scope: php
  description: url encode
  text: |
        asort(${1:array})

- trigger: array_sort_reverse
  scope: php
  description: url encode
  text: |
        arsort(${1:array})

# ---
# Php
# From: https://github.com/migliori/sublime-phpformbuilder
# ---
- trigger: setOptions;
  scope: php
  description: setOptions();
  tag: PHP Form Builder
  tagHide: true
  text: |
        $options = array(
            'horizontalLabelCol'       => 'col-sm-${1:4}',
            'horizontalOffsetCol'      => 'col-sm-offset-${1:4}',
            'horizontalElementCol'     => 'col-sm-${2:8}',
        );
        $form->setOptions($options);

- trigger: newForm;
  scope: php
  description: create new Form;
  tag: PHP Form Builder
  tagHide: true
  text: |
        use phpformsForm;
        use phpformsValidatorValidator;

        @session_start();
        include_once rtrim($_SERVER['DOCUMENT_ROOT'], DIRECTORY_SEPARATOR) . '/${1:phpforms}/Form.php';

        /* =============================================
        validation if posted
        ============================================= */

        if ($_SERVER["REQUEST_METHOD"] == "POST") {
            include_once '${1:phpforms}/Validator/Validator.php';
            include_once '${1:phpforms}/Validator/Exception.php';
            $validator = new Validator($_POST);
            $required = array('name', 'first-name');
            foreach ($required as $required) {
                $validator->required()->validate($required);
            }

            // check for errors

            if ($validator->hasErrors()) {
                $_SESSION['errors']['${2:my-form}'] = $validator->getAllErrors();
            } else {
                $from_email = '${3:you@your-email.com}';
                $adress = '${3:you@your-email.com}';
                $subject = '${4:Email Subject}';
                $filter_values = '${2:my-form}, submit-btn';
                $sent_message = Form::sendMail($from_email, $adress, $subject, $filter_values);
                Form::clear('${2:my-form}');
            }
        }
        $form = new Form('${2:my-form}');
        $form->addInput('text', 'name', '', 'Name : ', 'required=required');
        $form->addInput('text', 'first-name', '', 'First name : ', 'required=required');
        $form->addBtn('button', 'cancel', 0, 'Cancel', 'class=btn btn-warning', 'btn-group');
        $form->addBtn('submit', 'submit-btn', 1, 'Submit', 'class=btn btn-success', 'btn-group');
        $form->printBtnGroup('btn-group');
        
- trigger: setAction
  scope: php
  description: setAction($url, $add_get_vars = true);
  tag: PHP Form Builder
  tagHide: true
  text: |
        $form->setAction(${1:htmlspecialchars($_SERVER["PHP_SELF"])}, ${2:$add_get_vars = true});
        
- trigger: addHtml
  scope: php
  description: addHtml($html, $element_name = '', $pos = 'after');
  tag: PHP Form Builder
  tagHide: true
  text: |
        $form->addHtml(${1:$html}, ${2:$element_name = ''}, ${3:$pos = 'after'});
        
- trigger: addInputWrapper
  scope: php
  description: addInputWrapper($html, $element_name);
  tag: PHP Form Builder
  tagHide: true
  text: |
        $form->addInputWrapper(${1:'<div class="wrapper"></div>'}, ${2:'element_name'});
        
- trigger: addInput;
  scope: php
  description: addInput($type, $name, $value = '', $label = '', $attr = '');
  tag: PHP Form Builder
  tagHide: true
  text: |
        $form->addInput(${1:$type}, ${2:$name}, ${3:$value = ''}, ${4:$label = ''}, ${5:$attr = ''});
        
- trigger: groupInputs
  scope: php
  description: groupInputs($input1, $input2, $input3 = '');
  tag: PHP Form Builder
  tagHide: true
  text: |
        $form->groupInputs('${1:field_1}', '${2:field_2}');
        
- trigger: addFileUpload
  scope: php
  description: addFileUpload($type, $name, $value = '', $label = '', $attr = '', $fileUpload_config = '');
  tag: PHP Form Builder
  tagHide: true
  text: |
        $fileUpload_config = array(
        	'xml'                 => ${1:'default'},
            'uploader'            => ${2:'defaultFileUpload.php'},
            'btn-text'            => ${3:'Browse ...'},
            'max-number-of-files' => ${4:3}
        );
        $form->addHtml('<span class="help-block">3 files max. Accepted File Types : .pdf, .doc[x], .xls[x], .txt</span>', ${5:$name}, 'after');
        $form->addFileUpload('file', ${5:$name}, ${6:$value = ''}, ${7:$label = ''}, ${8:$attr = ''}, $fileUpload_config);
        
- trigger: addTextarea
  scope: php
  description: addTextarea($name, $value = '', $label = '', $attr = '');
  tag: PHP Form Builder
  tagHide: true
  text: |
        $form->addTextarea(${1:$name}, ${2:$value = ''}, ${3:$label = ''}, ${4:$attr = ''});
        
- trigger: addOption
  scope: php
  description: addOption($select_name, $value, $txt, $group_name = '', $attr = '');
  tag: PHP Form Builder
  tagHide: true
  text: |
        $form->addOption(${1:$select_name}, ${2:$value}, ${3:$txt}, ${4:$group_name = ''}, ${5:$attr = ''});
        
- trigger: addSelect
  scope: php
  description: addSelect($select_name, $label = '', $attr = '', $displayGroupLabels = true);
  tag: PHP Form Builder
  tagHide: true
  text: |
        $form->addSelect(${1:$select_name}, ${2:$label}, ${3:$attr = ''}, ${4:$displayGroupLabels = true});
        
- trigger: addCountrySelect
  scope: php
  description: addCountrySelect($select_name, $label = '', $attr = '', $user_options = array());
  tag: PHP Form Builder
  tagHide: true
  text: |
        $form->addCountrySelect('${1:country}', '${2:Country : }');
        
- trigger: addRadio
  scope: php
  description: addRadio($group_name, $label, $value, $attr);
  tag: PHP Form Builder
  tagHide: true
  text: |
        $form->addRadio(${1:$group_name}, ${2:$label}, ${3:$value}, ${4:$attr = ''});
        
- trigger: printRadioGroup
  scope: php
  description: printRadioGroup($group_name, $label = '', $inline = true, $attr = '');
  tag: PHP Form Builder
  tagHide: true
  text: |
        $form->printRadioGroup(${1:$group_name}, ${2:$label}, ${3:$inline = true}, ${4:$attr = ''});
        
- trigger: addCheckbox
  scope: php
  description: addCheckbox($group_name, $label, $name, $value, $attr);
  tag: PHP Form Builder
  tagHide: true
  text: |
        $form->addCheckbox(${1:$group_name}, ${2:$label}, ${3:$name}, ${4:$value}, ${5:$attr});
        
- trigger: printCheckboxGroup
  scope: php
  description: printCheckboxGroup($group_name, $label = '', $inline = true, $attr = '');
  tag: PHP Form Builder
  tagHide: true
  text: |
        $form->printCheckboxGroup(${1:$group_name}, ${2:$label}, ${3:$inline = true}, ${4:$attr = ''});
        
- trigger: addBtn
  scope: php
  description: addBtn($type, $name, $value, $text, $attr = '', $btnGroupName = '');
  tag: PHP Form Builder
  tagHide: true
  text: |
        $form->addBtn(${1:$type}, ${2:$name}, ${3:$value}, ${4:$text}, ${5:$attr = ''}, ${6:$btnGroupName = ''});
   
- trigger: printBtnGroup
  scope: php
  description: printBtnGroup($btnGroupName, $label = '');
  tag: PHP Form Builder
  tagHide: true
  text: |
        $form->printBtnGroup(${1:$btnGroupName}, ${2:$label = ''});

- trigger: startFieldset
  scope: php
  description: startFieldset($legend = '');
  tag: PHP Form Builder
  tagHide: true
  text: |
        $form->startFieldset(${1:$legend = ''});

- trigger: endFieldset
  scope: php
  description: endFieldset();
  tag: PHP Form Builder
  tagHide: true
  text: |
        $form->endFieldset();

- trigger: addPlugin
  scope: php
  description: addPlugin($plugin_name, $selector, $js_content = 'default', $js_replacements = '');
  tag: PHP Form Builder
  tagHide: true
  text: |
        $form->addPlugin(${1:$plugin_name}, ${2:'#selector'}, ${3:$js_content = 'default'}, ${4:$js_replacements = ''});

- trigger: printIncludes
  scope: php
  description: printIncludes($type);
  tag: PHP Form Builder
  tagHide: true
  text: |
        $form->printIncludes('${1:js | css}');

- trigger: printJsCode
  scope: php
  description: printJsCode();
  tag: PHP Form Builder
  tagHide: true
  text: |
        $form->printJsCode();

- trigger: FormSendMail
  scope: php
  description: FormSendMail($from_email, $adress, $subject, $filter_values = '', $values = '');
  tag: PHP Form Builder
  tagHide: true
  text: |
        $from_email = '${1:you@your-email.com}';
        $adress = '${2:recipient@email.com}';
        $subject = '${3:Email Subject}';
        $filter_values = '${4:my-form, submit-btn}';
        $sent_message = Form::sendMail($from_email, $adress, $subject, $filter_values);

- trigger: FormSendAdvancedMail
  scope: php
  description: FormSendAdvancedMail($options, $values = '');
  tag: PHP Form Builder
  tagHide: true
  text: |
        $options = array(
            'from_email'     =>  '${1:you@your-email.com}',
            'from_name'      =>  '${2:phpforms}', // optional
            'reply_to'       =>  '${3:you@your-email.com}', // optional
            'adress'         =>  '${4:john.doe@gmail.com}',
            'cc'             =>  '${5:john.doe@free.fr}', // optional
            'bcc'            =>  '${6:john.doe@hotmail.com, john.doe@wanadoo.com}', // optional
            'subject'        =>  '${7:contact from phpforms}',
            'attachments'    =>  '${8:img/wallacegromit.jpg}', // optional
            'html_template'  => '${9:../mailer/email-templates/contact-email.html}', // optional
            'css_template'   => '${10:../mailer/email-templates/contact-email.css'}, // optional
            'filter_values'  => '${11:}', // optional
            'sent_message'   => '${12:<p class="alert alert-success">Your message has been successfully sent !</p>}', // optional
            'display_errors' => ${13:true} // optional, default false
         );
         $sent_message = Form::sendAdvancedMail($options);
        
- trigger: FormRegisterValues
  scope: php
  description: FormRegisterValues($form_ID);
  tag: PHP Form Builder
  tagHide: true
  text: |
        Form::registerValues('${1:my-form}');

- trigger: FormMergeValues
  scope: php
  description: FormMergeValues(array('step-form-1', 'step-form-2', 'step-form-3'));
  tag: PHP Form Builder
  tagHide: true
  text: |
        Form::mergeValues(array('${1:step-form-1}', '${2:step-form-2}', '${3:step-form-3}'));
   
- trigger: FormClear
  scope: php
  description: FormClear($form_ID)
  tag: PHP Form Builder
  tagHide: true
  text: |
        Form::clear('${1:my-form}');
   
- trigger: render
  scope: php
  description: render($debug = false);
  tag: PHP Form Builder
  tagHide: true
  text: |
        $form->render(${1:true | false});
        

